#!/bin/bash

# dynamic Values
apt-get update && apt-get install git -y -q
VCS_REF="$(git rev-parse --short HEAD)"
BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"

echo "DEBUG: ${VCSREF} and ${BUILD_DATE}"

# Begin generating manifest file
echo "image: ${DOCKER_REPO}:${DOCKER_TAG}" > auto-docker-manifest.yaml
echo "manifests:" >> auto-docker-manifest.yaml

echo "TEST"
# Cycle trough the the arches
for DEST_BUILD_ARCH in ${DEST_ARCHES}
do
echo "DEBUG: Begin Cycle ${DEST_BUILD_ARCH}"
    DEST_OS="linux"
    # Set AMD64
    if [ ${DEST_BUILD_ARCH} == "amd64" ]; then
        DEST_ARCH=${DEST_BUILD_ARCH}
        DOCKER_PREFIX=""
        echo "  - image: ${DOCKER_REPO}:${DOCKER_TAG}-${DEST_BUILD_ARCH}" >> auto-docker-manifest.yaml
        echo "    platform:" >> auto-docker-manifest.yaml
        echo "      architecture: ${DEST_ARCH}" >> auto-docker-manifest.yaml
        echo "      os: ${DEST_OS}" >> auto-docker-manifest.yaml

    # Set armhf
    elif [ ${DEST_BUILD_ARCH} == "arm32v7" ]; then
        DEST_ARCH="arm"
        DOCKERFILE_PREFIX="armhf."
        echo "  - image: ${DOCKER_REPO}:${DOCKER_TAG}-${DEST_BUILD_ARCH}" >> auto-docker-manifest.yaml
        echo "    platform:" >> auto-docker-manifest.yaml
        echo "      architecture: ${DEST_ARCH}" >> auto-docker-manifest.yaml
        echo "      os: ${DEST_OS}" >> auto-docker-manifest.yaml
        echo "      variant: v7" >> auto-docker-manifest.yaml

    # Set arm64
    elif [ ${DEST_BUILD_ARCH} == "arm64v8" ]; then
        DEST_ARCH="arm64"
        DOCKERFILE_PREFIX="aarch64."
        echo "  - image: ${DOCKER_REPO}:${DOCKER_TAG}-${DEST_BUILD_ARCH}" >> auto-docker-manifest.yaml
        echo "    platform:" >> auto-docker-manifest.yaml
        echo "      architecture: ${DEST_ARCH}" >> auto-docker-manifest.yaml
        echo "      os: ${DEST_OS}" >> auto-docker-manifest.yaml
        echo "      variant: v8" >> auto-docker-manifest.yaml

    # arch not found
    else
        echo "DEBUG: The buildarch is not referenced here. DEST_ARCH not set."
        exit 1
    fi

    echo "Begin Building"
    SRC_BUILD_TAG=${SRC_TAG}-${DEST_BUILD_ARCH}
    DOCKERFILE="${DOCKERFILE_PREFIX}Dockerfile"
    # Build the docker image
    docker build \
        --compress \
        --pull \
        --label description="The Developmentimage for ROS2 Cuisine" \
        --label docker.cmd="docker run -d ros2cuisine/vsc-master" \
        --label maintainer="cuisine@ichbestimmtnicht.de" \
        --label vendor="ichbestimmtnicht" \
        --label vcs-url="https://gitlab.com/ros2cuisine/bundler" \
        --label url="https://gitlab.com/ros2cuisine/bundler" \
        --label name="${DOCKER_REPO}:${DOCKER_TAG}-${DEST_BUILD_ARCH}" \
        --label version="${BUILD_VERSION}"\
        --label build-date="${BUILD_DATE}" \
        --label vcs-ref="${VCS_REF}" \
        --label schema-version="1.0.0-rc1" \
        --file "${DOCKERFILE}" \
        --build-arg ROS_DISTRO="${ROS_DISTRO}" \
        --build-arg SRC_REPO="${SRC_REPO}" \
        --build-arg SRC_TAG="${SRC_BUILD_TAG}" \
        --build-arg SRC_NAME="${SRC_NAME}" \
        --tag "${DOCKER_REPO}:${DOCKER_TAG}-${DEST_BUILD_ARCH}" \
        .
    
    echo "DEBUG: Push the docker image ${DEST_BUILD_ARCH}"
    docker push ${DOCKER_REPO}:${DOCKER_TAG}-${DEST_BUILD_ARCH}
done

echo "Exit build hook"

exit 0
